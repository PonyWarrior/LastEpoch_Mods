using HarmonyLib;
using Il2Cpp;
using Il2CppLE.Services.Models.Items;
using Il2CppLE.Services.Visuals;
using MelonLoader;
using UnityEngine;

namespace LastEpoch_Hud.Scripts.Mods.Items
{
    [RegisterTypeInIl2Cpp]
    public class Items_Temporalis : MonoBehaviour
    {
        public static Items_Temporalis instance { get; private set; }
        public Items_Temporalis(System.IntPtr ptr) : base(ptr) { }

        public static bool initializing = false;
        public static bool unique_equipped = false;

        public static Il2CppSystem.Collections.Generic.List<Ability> Player_Abilities = null;
        public static System.Collections.Generic.List<Structures.Skill> UserSkills = null;
        public static float temporalis_cooldown = 10f; //10Sec for debug

        void Awake()
        {
            instance = this;
        }
        void Update()
        {
            if (Unique.Icon.IsNullOrDestroyed()) { Assets.Loaded = false; }
            if (!Assets.Loaded) { Assets.Load(); }
            if ((Locales.current != Locales.Selected.Unknow) && (!Basic.AddedToBasicList)) { Basic.AddToBasicList(); }
            if ((Locales.current != Locales.Selected.Unknow) && (!Unique.AddedToUniqueList)) { Unique.AddToUniqueList(); }
            if ((Locales.current != Locales.Selected.Unknow) && (Unique.AddedToUniqueList) && (!Unique.AddedToDictionary)) { Unique.AddToDictionary(); }
            if (!Scenes.IsGameScene())
            {
                Player_Abilities = null;
                UserSkills = null;
                //unique_equipped = false;
                //need_update = false;
            }            
            if ((Player_Abilities.IsNullOrDestroyed()) && (!Refs_Manager.player_health.IsNullOrDestroyed()) && (!initializing))
            {
                initializing = true;
                Main.logger_instance.Msg("Temporalis : Init Player_Abilities");
                PlayerAbilityList player_ability_list = Refs_Manager.player_health.gameObject.GetComponent<PlayerAbilityList>();
                if (!player_ability_list.IsNullOrDestroyed())
                {
                    Player_Abilities = new Il2CppSystem.Collections.Generic.List<Ability>();
                    foreach (Ability ability in player_ability_list.equippedAbilities)
                    {
                        Player_Abilities.Add(ability);
                    }
                }
                UserSkills = new System.Collections.Generic.List<Structures.Skill>();
                initializing = false;
            }
            /*if ((!Player_Abilities.IsNullOrDestroyed()) && (UserSkills.IsNullOrDestroyed()) && (!initializing)) //Init UserSkills
            {
                initializing = true;
                Main.logger_instance.Msg("Temporalis : Init UserSkills");
                need_update = false; //Init not update cooldown
                UserSkills = new System.Collections.Generic.List<Structures.Skill>();
                foreach (Ability ability in Player_Abilities)
                {
                    ability.getCooldown();
                }
                initializing = false;
            }*/
            if (!Refs_Manager.player_actor.IsNullOrDestroyed()) //&& (!UserSkills.IsNullOrDestroyed()))
            {
                if ((Refs_Manager.player_actor.itemContainersManager.hasUniqueEquipped(Unique.unique_id)) && (!unique_equipped))
                {
                    Main.logger_instance.Msg("Temporalis : Set unique equipped");
                    unique_equipped = true;
                    //need_update = true;
                }
                else if ((!Refs_Manager.player_actor.itemContainersManager.hasUniqueEquipped(Unique.unique_id)) && (unique_equipped))
                {
                    Main.logger_instance.Msg("Temporalis : Set unique not equipped");
                    unique_equipped = false;
                    //need_update = true;
                }
            }
            /*if ((need_update) && (!Player_Abilities.IsNullOrDestroyed()) && (!UserSkills.IsNullOrDestroyed()) && (!initializing))
            {
                initializing = true;
                Main.logger_instance.Msg("Temporalis : need_update");
                foreach (Ability ability in Player_Abilities)
                {
                    ability.getCooldown();
                }
                need_update = false;
                initializing = false;
            }*/
        }

        public class Assets
        {
            public static bool Loaded = false;
            public static bool loading = false;
            public static void Load()
            {                
                if ((!Loaded) && (!Hud_Manager.asset_bundle.IsNullOrDestroyed()) && (!loading))
                {
                    loading = true;
                    try
                    {
                        foreach (string name in Hud_Manager.asset_bundle.GetAllAssetNames())
                        {
                            if (name.Contains("/temporalis/"))
                            {
                                if ((Functions.Check_Texture(name)) && (name.Contains("icon")) && (Unique.Icon.IsNullOrDestroyed()))
                                {                                    
                                    Texture2D texture = Hud_Manager.asset_bundle.LoadAsset(name).TryCast<Texture2D>();
                                    Unique.Icon = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), Vector2.zero);
                                }
                            }
                        }
                        if (!Unique.Icon.IsNullOrDestroyed()) { Loaded = true; }
                        else { Loaded = false; }
                    }
                    catch { Main.logger_instance?.Error("Temporalis Asset Error"); }
                    loading = false;
                }
            }
        }
        public class Structures
        {
            public struct Skill
            {
                public Ability ability;
                public float default_cooldown;
                public float new_cooldown;
            }
        }
        public class Basic
        {
            public static bool AddedToBasicList = false;
            public static readonly byte base_type = 1; //Body Armor
            public static readonly int base_id = 72;
            public static ItemList.EquipmentItem Item()
            {
                ItemList.EquipmentItem item = new ItemList.EquipmentItem
                {
                    classRequirement = ItemList.ClassRequirement.None,
                    implicits = implicits(),
                    subClassRequirement = ItemList.SubClassRequirement.None,
                    cannotDrop = true,
                    itemTags = ItemLocationTag.None,
                    levelRequirement = 64,
                    name = Get_Subtype_Name(),
                    subTypeID = base_id
                };

                return item;
            }

            public static void AddToBasicList()
            {
                if ((!AddedToBasicList) && (!Refs_Manager.item_list.IsNullOrDestroyed()))
                {
                    try
                    {
                        Refs_Manager.item_list.EquippableItems[base_type].subItems.Add(Item());
                        AddedToBasicList = true;
                    }
                    catch { Main.logger_instance?.Error("Temporalis Basic List Error"); }
                }
            }
            public static string Get_Subtype_Name()
            {
                string result = "";
                switch (Locales.current)
                {
                    case Locales.Selected.English: { result = ESLocales.SubType.en; break; }
                    case Locales.Selected.French: { result = ESLocales.SubType.en; break; }
                    case Locales.Selected.German: { result = ESLocales.SubType.en; break; }
                    case Locales.Selected.Russian: { result = ESLocales.SubType.en; break; }
                    case Locales.Selected.Portuguese: { result = ESLocales.SubType.en; break; }
                    case Locales.Selected.Korean: { result = ESLocales.SubType.en; break; }
                    case Locales.Selected.Polish: { result = ESLocales.SubType.en; break; }
                    case Locales.Selected.Chinese: { result = ESLocales.SubType.en; break; }
                    case Locales.Selected.Spanish: { result = ESLocales.SubType.en; break; }
                }

                return result;
            }

            private static Il2CppSystem.Collections.Generic.List<ItemList.EquipmentImplicit> implicits()
            {
                Il2CppSystem.Collections.Generic.List<ItemList.EquipmentImplicit> implicits = new Il2CppSystem.Collections.Generic.List<ItemList.EquipmentImplicit>();
                implicits.Add(new ItemList.EquipmentImplicit
                {
                    implicitMaxValue = 211,
                    implicitValue = 161,
                    property = SP.WardGain,
                    specialTag = 0,
                    tags = AT.None,
                    type = BaseStats.ModType.ADDED
                });

                return implicits;
            }
        }
        public class Unique
        {
            public static bool AddedToUniqueList = false;
            public static bool AddedToDictionary = false;
            public static Sprite Icon = null;
            public static readonly ushort unique_id = 424;
            public static UniqueList.Entry Item()
            {
                UniqueList.Entry item = new UniqueList.Entry
                {
                    name = Get_Unique_Name(),
                    displayName = Get_Unique_Name(),
                    uniqueID = unique_id,
                    isSetItem = false,
                    setID = 0,
                    overrideLevelRequirement = true,
                    levelRequirement = 64,
                    legendaryType = UniqueList.LegendaryType.LegendaryPotential,
                    overrideEffectiveLevelForLegendaryPotential = true,
                    effectiveLevelForLegendaryPotential = 0,
                    canDropRandomly = true,
                    rerollChance = 1,
                    itemModelType = UniqueList.ItemModelType.Unique,
                    subTypeForIM = 0,
                    baseType = Basic.base_type,
                    subTypes = SubType(),
                    mods = Mods(),
                    tooltipDescriptions = TooltipDescription(),
                    loreText = Get_Unique_Lore(), //lore,
                    tooltipEntries = TooltipEntries(),
                    oldSubTypeID = 0,
                    oldUniqueID = 0
                };

                return item;
            }

            public static void AddToUniqueList()
            {
                if ((!AddedToUniqueList) && (!Refs_Manager.unique_list.IsNullOrDestroyed()))
                {
                    try
                    {
                        UniqueList.getUnique(0); //force initialize uniquelist
                        Refs_Manager.unique_list.uniques.Add(Item());
                        AddedToUniqueList = true;
                    }
                    catch { Main.logger_instance?.Error("Temporalis Unique List Error"); }
                }
            }
            public static void AddToDictionary()
            {
                if ((AddedToUniqueList) && (!AddedToDictionary) && (!Refs_Manager.unique_list.IsNullOrDestroyed()))
                {
                    try
                    {
                        UniqueList.Entry item = null;
                        if (Refs_Manager.unique_list.uniques.Count > 1)
                        {
                            foreach (UniqueList.Entry unique in Refs_Manager.unique_list.uniques)
                            {
                                if ((unique.uniqueID == unique_id) && (unique.name == Get_Unique_Name()))
                                {
                                    item = unique;
                                    break;
                                }
                            }
                        }
                        if (!item.IsNullOrDestroyed())
                        {
                            Refs_Manager.unique_list.entryDictionary.Add(unique_id, item);
                            AddedToDictionary = true;
                        }
                    }
                    catch { Main.logger_instance?.Error("Temporalis Unique Dictionary Error"); }
                }
            }
            public static string Get_Unique_Name()
            {
                string result = "";
                switch (Locales.current)
                {
                    case Locales.Selected.English: { result = ESLocales.UniqueName.en; break; }
                    case Locales.Selected.French: { result = ESLocales.UniqueName.en; break; }
                    case Locales.Selected.German: { result = ESLocales.UniqueName.en; break; }
                    case Locales.Selected.Russian: { result = ESLocales.UniqueName.en; break; }
                    case Locales.Selected.Portuguese: { result = ESLocales.UniqueName.en; break; }
                    case Locales.Selected.Korean: { result = ESLocales.UniqueName.en; break; }
                    case Locales.Selected.Polish: { result = ESLocales.UniqueName.en; break; }
                    case Locales.Selected.Chinese: { result = ESLocales.UniqueName.en; break; }
                    case Locales.Selected.Spanish: { result = ESLocales.UniqueName.en; break; }
                }

                return result;
            }
            public static string Get_Unique_Description()
            {
                string result = "";
                switch (Locales.current)
                {
                    case Locales.Selected.English: { result = ESLocales.UniqueDescription.en; break; }
                    case Locales.Selected.French: { result = ESLocales.UniqueDescription.en; break; }
                    case Locales.Selected.Korean: { result = ESLocales.UniqueDescription.en; break; }
                    case Locales.Selected.German: { result = ESLocales.UniqueDescription.en; break; }
                    case Locales.Selected.Russian: { result = ESLocales.UniqueDescription.en; break; }
                    case Locales.Selected.Polish: { result = ESLocales.UniqueDescription.en; break; }
                    case Locales.Selected.Portuguese: { result = ESLocales.UniqueDescription.en; break; }
                    case Locales.Selected.Chinese: { result = ESLocales.UniqueDescription.en; break; }
                    case Locales.Selected.Spanish: { result = ESLocales.UniqueDescription.en; break; }
                }

                return result;
            }
            public static string Get_Unique_Lore()
            {
                string result = "";
                switch (Locales.current)
                {
                    case Locales.Selected.English: { result = ESLocales.Lore.en; break; }
                    case Locales.Selected.French: { result = ESLocales.Lore.en; break; }
                    case Locales.Selected.German: { result = ESLocales.Lore.en; break; }

                    case Locales.Selected.Korean: { result = ESLocales.Lore.en; break; }
                    case Locales.Selected.Russian: { result = ESLocales.Lore.en; break; }
                    case Locales.Selected.Polish: { result = ESLocales.Lore.en; break; }
                    case Locales.Selected.Portuguese: { result = ESLocales.Lore.en; break; }
                    case Locales.Selected.Chinese: { result = ESLocales.Lore.en; break; }
                    case Locales.Selected.Spanish: { result = ESLocales.Lore.en; break; }
                }

                return result;
            }

            private static Il2CppSystem.Collections.Generic.List<byte> SubType()
            {
                Il2CppSystem.Collections.Generic.List<byte> result = new Il2CppSystem.Collections.Generic.List<byte>();
                byte r = (byte)Basic.base_id;
                result.Add(r);

                return result;
            }
            private static Il2CppSystem.Collections.Generic.List<UniqueItemMod> Mods()
            {
                Il2CppSystem.Collections.Generic.List<UniqueItemMod> result = new Il2CppSystem.Collections.Generic.List<UniqueItemMod>();
                result.Add(new UniqueItemMod
                {
                    canRoll = true,
                    property = SP.WardGain,
                    tags = AT.None,
                    type = BaseStats.ModType.ADDED,
                    maxValue = 150,
                    value = 100
                });
                result.Add(new UniqueItemMod
                {
                    canRoll = true,
                    property = SP.AllResistances,
                    tags = AT.None,
                    type = BaseStats.ModType.INCREASED,
                    maxValue = 0.2f,
                    value = 0.1f
                });
                result.Add(new UniqueItemMod
                {
                    canRoll = true,
                    property = SP.DamageTakenBuff,
                    tags = AT.None,
                    type = BaseStats.ModType.ADDED,
                    maxValue = 0.2f,
                    value = 0.1f
                });

                return result;
            }
            private static Il2CppSystem.Collections.Generic.List<UniqueModDisplayListEntry> TooltipEntries()
            {
                Il2CppSystem.Collections.Generic.List<UniqueModDisplayListEntry> result = new Il2CppSystem.Collections.Generic.List<UniqueModDisplayListEntry>();
                result.Add(new UniqueModDisplayListEntry(0));
                result.Add(new UniqueModDisplayListEntry(1));
                result.Add(new UniqueModDisplayListEntry(2));
                result.Add(new UniqueModDisplayListEntry(128));

                return result;
            }
            private static Il2CppSystem.Collections.Generic.List<ItemTooltipDescription> TooltipDescription()
            {
                Il2CppSystem.Collections.Generic.List<ItemTooltipDescription> result = new Il2CppSystem.Collections.Generic.List<ItemTooltipDescription>();
                result.Add(new ItemTooltipDescription { description = Get_Unique_Description() });

                return result;
            }
            /*private static UniqueList.LegendaryType LegendaryType()
            {
                UniqueList.LegendaryType legendaryType = UniqueList.LegendaryType.LegendaryPotential;
                if (Save_Manager.instance.data.Items.Headhunter.WeaverWill) { legendaryType = UniqueList.LegendaryType.WeaversWill; }

                return legendaryType;
            }*/

            [HarmonyPatch(typeof(InventoryItemUI), "SetImageSpritesAndColours")]
            public class InventoryItemUI_SetImageSpritesAndColours
            {
                [HarmonyPostfix]
                static void Postfix(ref Il2Cpp.InventoryItemUI __instance)
                {
                    if ((__instance.EntryRef.data.getAsUnpacked().FullName == Get_Unique_Name()) && (!Icon.IsNullOrDestroyed()))
                    {
                        __instance.contentImage.sprite = Icon;
                    }
                }
            }

            [HarmonyPatch(typeof(UITooltipItem), "GetItemSprite")]
            public class UITooltipItem_GetItemSprite
            {
                [HarmonyPostfix]
                static void Postfix(ref UnityEngine.Sprite __result, ItemData __0)
                {
                    if ((__0.getAsUnpacked().FullName == Get_Unique_Name()) && (!Icon.IsNullOrDestroyed()))
                    {
                        __result = Icon;
                    }
                }
            }
        }
        public class Visual
        {
            [HarmonyPatch(typeof(ClientVisualsService), "GetItemVisual")]
            public class ClientVisualsService_GetItemVisual
            {
                [HarmonyPrefix]
                static void Prefix(ClientVisualsService __instance, ref ItemVisualKey __0)
                {
                    if ((__0.EquipmentType == EquipmentType.BODY_ARMOR) &&
                        (__0.SubType == Basic.base_id) &&
                        (__0.UniqueID == Unique.unique_id))
                    {
                        __0.SubType = 1;
                        __0.UniqueID = 8; //Doublet of Onos Tull                        
                    }
                }
            }
        }
        public class Hooks
        {
            /*[HarmonyPatch(typeof(AbilityInfo), "getCooldown")]
            public class AbilityInfo_getCooldown
            {
                [HarmonyPrefix]
                static void Prefix(AbilityInfo __instance, float __result)
                {
                    Main.logger_instance.Msg("AbilityInfo.getCooldown(); : " + __instance.ToString() + ", Result = " + __result);
                }
            }

            [HarmonyPatch(typeof(Ability), "getCooldown")]
            public class Ability_getCooldown
            {
                [HarmonyPrefix]
                static void Prefix(Ability __instance, float __result)
                {
                    Main.logger_instance.Msg("Ability.getCooldown(); : " + __instance.ToString() + ", Result = " + __result);
                }
            }

            [HarmonyPatch(typeof(AbilityMutator), "getCooldown")]
            public class AbilityMutator_getCooldown
            {
                [HarmonyPrefix]
                static void Prefix(AbilityMutator __instance, float __result)
                {
                    Main.logger_instance.Msg("AbilityMutator.getCooldown(); : " + __instance.ToString() + ", Result = " + __result);
                }
            }*/


            /*[HarmonyPatch(typeof(CharacterMutator), "OnAbilityUse")]
            public class OnAbilityUse
            {
                [HarmonyPrefix]
                static void Prefix(CharacterMutator __instance, AbilityInfo __0, ref AbilityMutator __1, float __2, UnityEngine.Vector3 __3, bool __4)
                {
                    if ((!Refs_Manager.player_actor.IsNullOrDestroyed()) && (!Player_Abilities.IsNullOrDestroyed()))
                    {
                        Ability ability = null;
                        try
                        {
                            ability = __1.getAbility();
                            if (Player_Abilities.Contains(ability))
                            {
                                
                            }
                            //__1.SetCooldown();
                        }
                        catch { Main.logger_instance?.Error("OnAbilityUse Prefix : Can't get Ability"); }
                    }
                }
            }*/

            /*[HarmonyPatch(typeof(Ability), "getCooldown")]
            public class Ability_getCooldown
            {
                [HarmonyPostfix]
                static void Postfix(ref Ability __instance, ref float __result)
                {
                    if ((!Refs_Manager.player_actor.IsNullOrDestroyed()) && (!Player_Abilities.IsNullOrDestroyed()))
                    {
                        if (Player_Abilities.Contains(__instance))
                        {
                            Main.logger_instance.Msg("Ability.getCooldown(); Instance = " + __instance.ToString() + ", Result = " + __result);
                            if (!need_update) //Init
                            {
                                Main.logger_instance.Msg("Temporalis : Init cooldown");
                                //if (UserSkills.IsNullOrDestroyed()) { UserSkills = new Il2CppSystem.Collections.Generic.List<Structures.Skill>(); }
                                Main.logger_instance.Msg("Temporalis : Check if UserSkills contain " + __instance.ToString());
                                bool found = false;
                                foreach (Structures.Skill skill in UserSkills)
                                {
                                    if (skill.ability == __instance)
                                    {
                                        Main.logger_instance.Msg("Temporalis : Already in UserSkills, Break");
                                        found = true; //dont duplicate
                                        break;
                                    }
                                }
                                if (!found)
                                {
                                    Main.logger_instance.Msg("Temporalis : Create new Structures.Skill");
                                    Structures.Skill skill = new Structures.Skill();
                                    skill.ability = __instance;
                                    skill.default_cooldown = __result;
                                    skill.new_cooldown = __result - temporalis_cooldown;
                                    if (skill.new_cooldown < 0) { skill.new_cooldown = 0; }

                                    Main.logger_instance.Msg("Temporalis : Add " + __instance.ToString() + " to UserSkills");
                                    UserSkills.Add(skill);
                                }
                            }
                            else //Update
                            {
                                Main.logger_instance.Msg("Temporalis : Update cooldown");
                                int index = 0;
                                bool found = false;
                                foreach (Structures.Skill skill in UserSkills)
                                {
                                    if (skill.ability == __instance)
                                    {
                                        found = true;
                                        break;
                                    }
                                    index++;
                                }
                                if (found)
                                {
                                    if (unique_equipped)
                                    {
                                        Main.logger_instance.Msg("Temporalis : Set new_cooldown = " + UserSkills[index].new_cooldown);
                                        __result = UserSkills[index].new_cooldown;
                                    }
                                    else
                                    {
                                        Main.logger_instance.Msg("Temporalis : Set default_cooldown = " + UserSkills[index].default_cooldown);
                                        __result = UserSkills[index].default_cooldown;
                                    }
                                }
                            }
                        }
                    }
                }
            }*/

            //UI
            /*[HarmonyPatch(typeof(ChargeManager), "getCooldown", new System.Type[] { typeof(Ability) })]
            public class ChargeManager_getCooldown
            {
                [HarmonyPostfix]
                static void Postfix(ChargeManager __instance, ref float __result, Ability __0)
                {
                    Main.logger_instance.Msg("ChargeManager.getCooldown(Ability); Result = " + __result);
                }
            }*/

            /*[HarmonyPatch(typeof(ChargeManager), "getCooldown", new System.Type[] { typeof(int) })]
            public class ChargeManager_getCooldown2
            {
                [HarmonyPostfix]
                static void Postfix(ChargeManager __instance, ref float __result, int __0)
                {
                    //Main.logger_instance.Msg("ChargeManager.getCooldown(" + __0 + "); Result = " + __result);
                    if (!Refs_Manager.player_actor.IsNullOrDestroyed())
                    {
                        if (Refs_Manager.player_actor.itemContainersManager.hasUniqueEquipped(Unique.unique_id))
                        {
                            //Main.logger_instance.Msg("Temporalis equipped");
                            float result = __result;
                            if (result > temporalis_cooldown) { result -= temporalis_cooldown; }
                            else { result = 0f; }
                            __result = result;
                            //Main.logger_instance.Msg("New Cooldown = " + __result);
                        }
                    }
                }
            }*/
        }
        public class ESLocales
        {
            private static string basic_subtype_name_key = "Item_SubType_Name_" + Basic.base_type + "_" + Basic.base_id;
            private static string unique_name_key = "Unique_Name_" + Unique.unique_id;
            private static string unique_description_key = "Unique_Tooltip_0_" + Unique.unique_id;
            private static string unique_lore_key = "Unique_Lore_" + Unique.unique_id;

            public class SubType
            {
                public static string en = "Silk Robe";
                //Add all languages here
            }
            public class UniqueName
            {
                public static string en = "Temporalis";
                //Add all languages here
            }
            public class UniqueDescription
            {
                public static string en = "Skills have - " + (int)temporalis_cooldown + " seconds to Cooldown";
                //Add all languages here
            }
            public class Lore
            {
                public static readonly string en = "The final element the tale-women\r\nmastered was Time itself.";
                //Add all languages here
            }

            [HarmonyPatch(typeof(Localization), "TryGetText")]
            public class Localization_TryGetText
            {
                [HarmonyPrefix]
                static bool Prefix(ref bool __result, string __0) //, Il2CppSystem.String __1)
                {
                    bool result = true;
                    if ((__0 == basic_subtype_name_key) || (__0 == unique_name_key) ||
                        (__0 == unique_description_key) || (__0 == unique_lore_key))
                    {
                        __result = true;
                        result = false;
                    }

                    return result;
                }
            }

            [HarmonyPatch(typeof(Localization), "GetText")]
            public class Localization_GetText
            {
                [HarmonyPrefix]
                static bool Prefix(ref string __result, string __0)
                {
                    bool result = true;
                    if (__0 == basic_subtype_name_key)
                    {
                        __result = Basic.Get_Subtype_Name();
                        result = false;
                    }
                    else if (__0 == unique_name_key)
                    {
                        __result = Unique.Get_Unique_Name();
                        result = false;
                    }
                    else if (__0 == unique_description_key)
                    {
                        string description = Unique.Get_Unique_Description();
                        if (description != "")
                        {
                            __result = description;
                            result = false;
                        }
                    }
                    else if (__0 == unique_lore_key)
                    {
                        string lore = Unique.Get_Unique_Lore();
                        if (lore != "")
                        {
                            __result = lore;
                            result = false;
                        }
                    }

                    return result;
                }
            }
        }
    }
}
